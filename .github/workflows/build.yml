name: build
on:
  push:
    tags:
      - 'v*'
    branches:
      - master
    paths:
      - '**.go'
      - '**.yml'
  pull_request:
    branches:
      - master
    paths:
      - '**.go'
      - '**.yml'
jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - name: Set up environment
        env:
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
        run: |
          # Get version from Git (latest tag without leading "v" or sha1 if no tag):
          BUILD_VERSION="$(git describe --tags --always 2>/dev/null | sed 's/^v//')"
          # Get the date in RFC 3339 format (UTC)
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%S")"
          echo "BUILD_FLAGS=-X main.version=${BUILD_VERSION} -X main.buildTimeStr=${BUILD_TIME} -X github.com/jeandeaual/tts-deckconverter/tts/upload.imgurClientID=${IMGUR_CLIENT_ID}" >> "${GITHUB_ENV}"
      - name: Get the Fyne dependencies
        run: sudo apt-get update && sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev
      - name: Install the fyne command
        run: (cd; go install fyne.io/fyne/v2/cmd/fyne@v2.1.2)
      - name: Cache the Go modules
        uses: actions/cache@v2.1.7
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download the Go modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download
      - name: Build CLI
        run: |
          go build -o build-cli/tts-deckconverter -ldflags "${BUILD_FLAGS}" ./cmd/tts-deckconverter
        env:
          CGO_ENABLED: 0
          GOOS: linux
          GOARCH: amd64
      - name: Upload CLI package
        uses: actions/upload-artifact@v2
        with:
          name: tts-deckconverter-cli-linux-amd64
          path: build-cli
      - name: Build GUI
        run: |
          go build -o build-gui/tts-deckconverter-gui -ldflags "${BUILD_FLAGS}" ./cmd/tts-deckconverter-gui
          fyne package --name "TTS Deck Converter" --appID fr.jeandeau.tts-deckconverter-gui --icon ./resources/icon.png --executable ./build-gui/tts-deckconverter-gui --release
          # TODO: Remove
          ls -Alh
          ls -Alh build-gui
      - name: Upload GUI package
        uses: actions/upload-artifact@v2
        with:
          name: tts-deckconverter-gui-linux-amd64
          path: build-gui
  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - name: Set up environment
        env:
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
        run: |
          # Get version from Git (latest tag without leading "v" or sha1 if no tag):
          $BuildVersion = git describe --tags --always 2> $null | % { $_.TrimStart("v") }
          # Get the date in RFC 3339 format (UTC)
          $BuildTime = Get-Date (Get-Date).ToUniversalTime() -UFormat '+%Y-%m-%dT%H:%M:%S'
          echo "BUILD_FLAGS=-X main.version=$BuildVersion -X main.buildTimeStr=$BuildTime -X github.com/jeandeaual/tts-deckconverter/tts/upload.imgurClientID=$env:IMGUR_CLIENT_ID -s -w" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
      - name: Install the fyne command
        run: pwsh -Command { cd; go install fyne.io/fyne/v2/cmd/fyne@v2.1.2 }
      - name: Cache the Go modules
        uses: actions/cache@v2.1.7
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download the Go modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download
      - name: Build CLI
        run: |
          go build -o build-cli/tts-deckconverter.exe -ldflags "${env:BUILD_FLAGS}" .\cmd\tts-deckconverter
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
      - name: Upload CLI package
        uses: actions/upload-artifact@v2
        with:
          name: tts-deckconverter-cli-windows-amd64
          path: build-cli
      - name: Build GUI
        shell: msys2 {0}
        run: |
          go build -o build-gui/tts-deckconverter-gui.exe -ldflags "${env:BUILD_FLAGS} -H windowsgui" ./cmd/tts-deckconverter-gui
          ls -Alh build-gui
          fyne package --name "TTS Deck Converter" --appID fr.jeandeau.tts-deckconverter-gui --icon ./resources/icon.png --executable ./build-gui/tts-deckconverter-gui.exe --release
          ls -Alh
          echo "====== build-gui"
          ls -Alh build-gui
      - name: Upload GUI package
        uses: actions/upload-artifact@v2
        with:
          name: tts-deckconverter-gui-windows-amd64
          path: build-gui
  build-macos:
    name: Build (MacOS)
    runs-on: macos-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'
      - name: Set up environment
        env:
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
        run: |
          # Get version from Git (latest tag without leading "v" or sha1 if no tag):
          BUILD_VERSION="$(git describe --tags --always 2>/dev/null | sed 's/^v//')"
          # Get the date in RFC 3339 format (UTC)
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%S")"
          echo "BUILD_FLAGS=-X main.version=${BUILD_VERSION} -X main.buildTimeStr=${BUILD_TIME} -X github.com/jeandeaual/tts-deckconverter/tts/upload.imgurClientID=${IMGUR_CLIENT_ID}" >> "${GITHUB_ENV}"
      - name: Install the fyne command
        run: (cd; go install fyne.io/fyne/v2/cmd/fyne@v2.1.2)
      - name: Cache the Go modules
        uses: actions/cache@v2.1.7
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download the Go modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download
      - name: Build CLI
        run: |
          go build -o build-cli/tts-deckconverter -ldflags "${BUILD_FLAGS}" ./cmd/tts-deckconverter
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: amd64
      - name: Upload CLI package
        uses: actions/upload-artifact@v2
        with:
          name: tts-deckconverter-cli-macos-amd64
          path: build-cli
      - name: Build GUI
        run: |
          go build -ldflags "${BUILD_FLAGS}" ./cmd/tts-deckconverter-gui
          fyne package --name "TTS Deck Converter" --appID fr.jeandeau.tts-deckconverter-gui --icon ./resources/icon.png --executable ./tts-deckconverter-gui --release
          # Build the OS X DMG file
          mkdir build-gui build-gui-dmg
          # TODO: Remove
          ls -Alh
          mv "TTS Deck Converter.app" build-gui/
          hdiutil create build-gui-dmg/tts-deckconverter-gui.dmg -ov -volname "TTSDeckConverterGUIInstall" -fs HFS+ -srcfolder build-gui
          hdiutil convert build-gui-dmg/tts-deckconverter-gui.dmg -format UDZO -o tts-deckconverter.dmg
      - name: Upload GUI package
        uses: actions/upload-artifact@v2
        with:
          name: tts-deckconverter-gui-macos-amd64
          path: build-gui-dmg
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Get dependencies
        run: |
          # Required by Fyne
          sudo apt-get update && sudo apt-get -y install libgl1-mesa-dev xorg-dev
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ~/bin v1.43.0
      - name: Run golangci-lint
        run: ~/bin/golangci-lint run --out-format github-actions
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
      - name: Get dependencies
        run: |
          # Required by Fyne
          sudo apt-get update && sudo apt-get -y install libgl1-mesa-dev xorg-dev
      - name: Cache the Go modules
        uses: actions/cache@v2.1.7
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download the Go modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download
      - name: Test
        run: go test -v -race ./...
  release:
    # Only release when pushing a tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Release
    needs:
      - build-linux
      - build-macos
      - build-windows
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: olegtarasov/get-tag@v2.1
        id: tag_name
        with:
          tagRegex: "v(?<version>.*)"
      - name: Download the build artifact (Linux x64)
        uses: actions/download-artifact@v2
        with:
          name: tts-deckconverter-gui-windows-amd64
          path: release-linux-x64
      - name: Archive the build artifact (Linux x64)
        run: tar -cvzf "${PACKAGE_NAME}-${TARGET}-${VERSION}.tar.gz" "release-${TARGET}"/*
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: linux-x64
      - name: Download the build artifact (macOS x64)
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.package.outputs.name }}-x86_64-apple-darwin-${{ steps.slug.outputs.sha7 }}
          path: release-macos-x64
      - name: Archive the build artifact (macOS x64)
        run: cd "release-${TARGET}" && zip -9 -r "../${PACKAGE_NAME}-${TARGET}-${VERSION}.zip" *
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: macos-x64
      - name: Download the build artifact (Windows x64)
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.package.outputs.name }}-x86_64-pc-windows-msvc-${{ steps.slug.outputs.sha7 }}
          path: release-windows-x64
      - name: Archive the build artifact (Windows x64)
        run: cd "release-${TARGET}" && zip -9 -r "../${PACKAGE_NAME}-${TARGET}-${VERSION}.zip" *
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: windows-x64
      - name: Create a new release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          artifacts: "*.tar.*,*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
